// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package lib

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*executionPayloadHeaderMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ExecutionPayloadWithTxRootV1) MarshalJSON() ([]byte, error) {
	type ExecutionPayloadWithTxRootV1 struct {
		ParentHash       common.Hash    `json:"parentHash" gencodec:"required"`
		FeeRecipient     common.Address `json:"feeRecipient" gencodec:"required"`
		StateRoot        common.Hash    `json:"stateRoot" gencodec:"required"`
		ReceiptsRoot     common.Hash    `json:"receiptsRoot" gencodec:"required"`
		LogsBloom        hexutil.Bytes  `json:"logsBloom" gencodec:"required"`
		PrevRandao       common.Hash    `json:"prevRandao" gencodec:"required"`
		Number           hexutil.Uint64 `json:"blockNumber" gencodec:"required"`
		GasLimit         hexutil.Uint64 `json:"gasLimit" gencodec:"required"`
		GasUsed          hexutil.Uint64 `json:"gasUsed" gencodec:"required"`
		Timestamp        hexutil.Uint64 `json:"timestamp" gencodec:"required"`
		ExtraData        hexutil.Bytes  `json:"extraData" gencodec:"required"`
		BaseFeePerGas    *hexutil.Big   `json:"baseFeePerGas" gencodec:"required"`
		BlockHash        common.Hash    `json:"blockHash" gencodec:"required"`
		Transactions     *[]string      `json:"transactions,omitempty"`
		TransactionsRoot common.Hash    `json:"transactionsRoot"`
	}
	var enc ExecutionPayloadWithTxRootV1
	enc.ParentHash = e.ParentHash
	enc.FeeRecipient = e.FeeRecipient
	enc.StateRoot = e.StateRoot
	enc.ReceiptsRoot = e.ReceiptsRoot
	enc.LogsBloom = e.LogsBloom
	enc.PrevRandao = e.PrevRandao
	enc.Number = hexutil.Uint64(e.Number)
	enc.GasLimit = hexutil.Uint64(e.GasLimit)
	enc.GasUsed = hexutil.Uint64(e.GasUsed)
	enc.Timestamp = hexutil.Uint64(e.Timestamp)
	enc.ExtraData = e.ExtraData
	enc.BaseFeePerGas = (*hexutil.Big)(e.BaseFeePerGas)
	enc.BlockHash = e.BlockHash
	enc.Transactions = e.Transactions
	enc.TransactionsRoot = e.TransactionsRoot
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayloadWithTxRootV1) UnmarshalJSON(input []byte) error {
	type ExecutionPayloadWithTxRootV1 struct {
		ParentHash       *common.Hash    `json:"parentHash" gencodec:"required"`
		FeeRecipient     *common.Address `json:"feeRecipient" gencodec:"required"`
		StateRoot        *common.Hash    `json:"stateRoot" gencodec:"required"`
		ReceiptsRoot     *common.Hash    `json:"receiptsRoot" gencodec:"required"`
		LogsBloom        *hexutil.Bytes  `json:"logsBloom" gencodec:"required"`
		PrevRandao       *common.Hash    `json:"prevRandao" gencodec:"required"`
		Number           *hexutil.Uint64 `json:"blockNumber" gencodec:"required"`
		GasLimit         *hexutil.Uint64 `json:"gasLimit" gencodec:"required"`
		GasUsed          *hexutil.Uint64 `json:"gasUsed" gencodec:"required"`
		Timestamp        *hexutil.Uint64 `json:"timestamp" gencodec:"required"`
		ExtraData        *hexutil.Bytes  `json:"extraData" gencodec:"required"`
		BaseFeePerGas    *hexutil.Big    `json:"baseFeePerGas" gencodec:"required"`
		BlockHash        *common.Hash    `json:"blockHash" gencodec:"required"`
		Transactions     *[]string       `json:"transactions,omitempty"`
		TransactionsRoot *common.Hash    `json:"transactionsRoot"`
	}
	var dec ExecutionPayloadWithTxRootV1
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for ExecutionPayloadWithTxRootV1")
	}
	e.ParentHash = *dec.ParentHash
	if dec.FeeRecipient == nil {
		return errors.New("missing required field 'feeRecipient' for ExecutionPayloadWithTxRootV1")
	}
	e.FeeRecipient = *dec.FeeRecipient
	if dec.StateRoot == nil {
		return errors.New("missing required field 'stateRoot' for ExecutionPayloadWithTxRootV1")
	}
	e.StateRoot = *dec.StateRoot
	if dec.ReceiptsRoot == nil {
		return errors.New("missing required field 'receiptsRoot' for ExecutionPayloadWithTxRootV1")
	}
	e.ReceiptsRoot = *dec.ReceiptsRoot
	if dec.LogsBloom == nil {
		return errors.New("missing required field 'logsBloom' for ExecutionPayloadWithTxRootV1")
	}
	e.LogsBloom = *dec.LogsBloom
	if dec.PrevRandao == nil {
		return errors.New("missing required field 'prevRandao' for ExecutionPayloadWithTxRootV1")
	}
	e.PrevRandao = *dec.PrevRandao
	if dec.Number == nil {
		return errors.New("missing required field 'blockNumber' for ExecutionPayloadWithTxRootV1")
	}
	e.Number = uint64(*dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for ExecutionPayloadWithTxRootV1")
	}
	e.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for ExecutionPayloadWithTxRootV1")
	}
	e.GasUsed = uint64(*dec.GasUsed)
	if dec.Timestamp == nil {
		return errors.New("missing required field 'timestamp' for ExecutionPayloadWithTxRootV1")
	}
	e.Timestamp = uint64(*dec.Timestamp)
	if dec.ExtraData == nil {
		return errors.New("missing required field 'extraData' for ExecutionPayloadWithTxRootV1")
	}
	e.ExtraData = *dec.ExtraData
	if dec.BaseFeePerGas == nil {
		return errors.New("missing required field 'baseFeePerGas' for ExecutionPayloadWithTxRootV1")
	}
	e.BaseFeePerGas = (*big.Int)(dec.BaseFeePerGas)
	if dec.BlockHash == nil {
		return errors.New("missing required field 'blockHash' for ExecutionPayloadWithTxRootV1")
	}
	e.BlockHash = *dec.BlockHash
	if dec.Transactions != nil {
		e.Transactions = dec.Transactions
	}
	if dec.TransactionsRoot != nil {
		e.TransactionsRoot = *dec.TransactionsRoot
	}
	return nil
}
