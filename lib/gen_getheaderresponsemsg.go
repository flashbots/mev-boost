// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package lib

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*getHeaderResponseMessageMarshallingOverrides)(nil)

// MarshalJSON marshals as JSON.
func (g GetHeaderResponseMessage) MarshalJSON() ([]byte, error) {
	type GetHeaderResponseMessage struct {
		Header ExecutionPayloadHeaderV1 `json:"header" gencodec:"required"`
		Value  *hexutil.Big             `json:"value" gencodec:"required"`
	}
	var enc GetHeaderResponseMessage
	enc.Header = g.Header
	enc.Value = (*hexutil.Big)(g.Value)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *GetHeaderResponseMessage) UnmarshalJSON(input []byte) error {
	type GetHeaderResponseMessage struct {
		Header *ExecutionPayloadHeaderV1 `json:"header" gencodec:"required"`
		Value  *hexutil.Big              `json:"value" gencodec:"required"`
	}
	var dec GetHeaderResponseMessage
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Header == nil {
		return errors.New("missing required field 'header' for GetHeaderResponseMessage")
	}
	g.Header = *dec.Header
	if dec.Value == nil {
		return errors.New("missing required field 'value' for GetHeaderResponseMessage")
	}
	g.Value = (*big.Int)(dec.Value)
	return nil
}
